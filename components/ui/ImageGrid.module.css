.gridContainer {
  width: 100vw;
  min-height: 100dvh;
  padding: var(--spacing-xxl);
}

/* Mobile gradient overlay - separate element for proper fixed positioning */
.mobileGradient {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 120px;
  background: linear-gradient(to top, #ffffff 0%, #ffffff 40%, rgba(255, 255, 255, 0) 100%);
  pointer-events: none;
  z-index: 10;
  opacity: 0;
  transition: opacity var(--transition-fast);
}

/* Show gradient only on mobile */
@media (max-width: 768px) {
  .mobileGradient {
    opacity: 1;
  }
}

.grid {
  display: grid;
  grid-template-columns: repeat(4, 110px);
  column-gap: calc((100vw - (2 * var(--spacing-xxl)) - (4 * 110px)) / 3);
  row-gap: 120px;
  justify-content: start;
}

.gridItem {
  display: flex;
  flex-direction: column;
  cursor: pointer;
  align-items: flex-start;
  content-visibility: auto;
  contain-intrinsic-size: 110px 100px;
}

.imageWrapper {
  width: 100%;
  max-width: 110px;
}

.gridImage {
  width: 100%;
  height: auto;
  display: block;
  will-change: opacity;
  transform: translateZ(0);
}

.imageNumber {
  margin-top: 12px;
  display: flex;
  align-items: center;
}

.arrow {
  font-size: 6px;
  opacity: 0;
  width: 0;
  margin: 0;
  transition: width 200ms ease-in-out, margin 200ms ease-in-out, opacity 200ms ease-in-out;
  overflow: hidden;
}

.gridItem:hover .arrow {
  opacity: 1;
  width: auto;
  margin: 0 8px 3px 0;
}

.caption {
  position: fixed;
  bottom: var(--edge-margin);
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: var(--spacing-md);
  font-size: 14px;
  align-items: center;
  z-index: var(--z-base);
}

.toggleView {
  text-decoration: underline;
  transition: opacity var(--transition-fast);
}

.toggleView:hover {
  opacity: 0.6;
}

.closeProject {
  text-decoration: underline;
  transition: opacity var(--transition-fast);
}

.closeProject:hover {
  opacity: 0.6;
}

/* Responsive grid columns - reduce when column gap would be less than 110px */
/* Breakpoint: (110px * 4) + (110px * 3) + (20px * 2) = 810px */
@media (max-width: 1024px) {
  .grid {
    grid-template-columns: repeat(3, 110px);
    column-gap: calc((100vw - (2 * var(--spacing-xxl)) - (3 * 110px)) / 2);
  }
}

/* Breakpoint: (110px * 3) + (110px * 2) + (20px * 2) = 590px */
@media (max-width: 768px) {
  .grid {
    grid-template-columns: repeat(2, 80px);
    column-gap: 20vw;
    row-gap: 80px;
    justify-content: center;


  }

  .gridContainer {
    padding: var(--spacing-xl);
    justify-items: center;
  }
  
}

